{"ast":null,"code":"var _jsxFileName = \"/Users/fernanda/Documents/Projects/sd-09-project-trybewallet/src/components/Form.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, handleInputs, handleTotal, stopEdit } from '../actions';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação'\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.editExpense = this.editExpense.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      fetchDispatch\n    } = this.props;\n    fetchDispatch();\n  }\n\n  componentDidUpdate() {\n    const {\n      editing,\n      stopDispatch\n    } = this.props;\n\n    if (editing) {\n      this.editExpense();\n      stopDispatch();\n    }\n\n    console.log('update');\n  }\n\n  editExpense() {\n    const {\n      editExpense\n    } = this.props;\n    this.setState({ ...editExpense\n    });\n  }\n\n  handleInputs({\n    name,\n    value\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  valueInput() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, \"Valor:\", /*#__PURE__*/React.createElement(\"input\", {\n      \"data-testid\": \"value-input\",\n      type: \"number\",\n      id: \"value-input\",\n      name: \"value\",\n      onChange: ({\n        target\n      }) => this.handleInputs(target),\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  descriptionInput() {\n    const {\n      description\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, \"Descri\\xE7\\xE3o:\", /*#__PURE__*/React.createElement(\"input\", {\n      \"data-testid\": \"description-input\",\n      type: \"text\",\n      id: \"description-input\",\n      name: \"description\",\n      onChange: ({\n        target\n      }) => this.handleInputs(target),\n      value: description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  currenciesInput() {\n    const {\n      currencies\n    } = this.props;\n    const {\n      currency\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, \"Moedas:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"currency-input\",\n      name: \"currency\",\n      onChange: ({\n        target\n      }) => this.handleInputs(target),\n      value: currency,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, currencies.map(cu => /*#__PURE__*/React.createElement(\"option\", {\n      \"data-testid\": cu,\n      key: cu,\n      value: cu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, cu))));\n  }\n\n  methodInput() {\n    const {\n      method\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"method-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, \"M\\xE9todo de pagamento:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"method-input\",\n      id: \"method-input\",\n      name: \"method\",\n      onChange: ({\n        target\n      }) => this.handleInputs(target),\n      value: method,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\")));\n  }\n\n  tagInput() {\n    const {\n      tag\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, \"Categoria:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"tag-input\",\n      id: \"tag-input\",\n      name: \"tag\",\n      onChange: ({\n        target\n      }) => this.handleInputs(target),\n      value: tag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, \"Alimenta\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, \"Lazer\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, \"Trabalho\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \"Transporte\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"Sa\\xFAde\")));\n  }\n\n  buttonInput() {\n    const {\n      isEditingButton\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.buttonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }, isEditingButton ? 'Editar despesa' : 'Adicionar despesa');\n  }\n\n  async fetchRates() {\n    const endpoint = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(endpoint);\n    const object = await response.json();\n    delete object.USDT;\n    return object;\n  }\n\n  async buttonClick() {\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id\n    } = this.state;\n    const {\n      stateDispatch,\n      expenses,\n      valueDispatch,\n      isEditingButton\n    } = this.props;\n    const rates = await this.fetchRates();\n    const obj = {\n      id: expenses.length,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: rates\n    };\n\n    if (isEditingButton) {\n      const updatedExpenses = expenses.map(expense => expense.id === id);\n    }\n\n    stateDispatch(obj);\n    valueDispatch(parseFloat(value) * parseFloat(rates[currency].ask));\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação'\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, this.valueInput(), this.descriptionInput(), this.currenciesInput(), this.methodInput(), this.tagInput(), this.buttonInput()));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  editExpense: state.wallet.editExpense,\n  editing: state.wallet.editing,\n  isEditingButton: state.wallet.isEditingButton\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchDispatch: () => dispatch(fetchCurrencies()),\n  stateDispatch: obj => dispatch(handleInputs(obj)),\n  valueDispatch: value => dispatch(handleTotal(value)),\n  stopDispatch: () => dispatch(stopEdit())\n});\n\nForm.propTypes = {\n  fetchDispatch: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  valueDispatch: PropTypes.func.isRequired,\n  editExpense: PropTypes.shape({}).isRequired,\n  editing: PropTypes.bool.isRequired,\n  stopDispatch: PropTypes.func.isRequired,\n  isEditingButton: PropTypes.bool.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/Users/fernanda/Documents/Projects/sd-09-project-trybewallet/src/components/Form.jsx"],"names":["React","connect","PropTypes","fetchCurrencies","handleInputs","handleTotal","stopEdit","Form","Component","constructor","props","state","value","description","currency","method","tag","buttonClick","bind","editExpense","componentDidMount","fetchDispatch","componentDidUpdate","editing","stopDispatch","console","log","setState","name","valueInput","target","descriptionInput","currenciesInput","currencies","map","cu","methodInput","tagInput","buttonInput","isEditingButton","fetchRates","endpoint","response","fetch","object","json","USDT","id","stateDispatch","expenses","valueDispatch","rates","obj","length","exchangeRates","updatedExpenses","expense","parseFloat","ask","render","mapStateToProps","wallet","mapDispatchToProps","dispatch","propTypes","func","isRequired","arrayOf","string","shape","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, handleInputs, handleTotal, stopEdit } from '../actions';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.editExpense = this.editExpense.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchDispatch } = this.props;\n    fetchDispatch();\n  }\n\n  componentDidUpdate() {\n    const { editing, stopDispatch } = this.props;\n    if (editing) {\n      this.editExpense();\n      stopDispatch();\n    }\n    console.log('update');\n  }\n\n  editExpense() {\n    const { editExpense } = this.props;\n    this.setState({\n      ...editExpense,\n    });\n  }\n\n  handleInputs({ name, value }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  valueInput() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"value-input\">\n        Valor:\n        <input\n          data-testid=\"value-input\"\n          type=\"number\"\n          id=\"value-input\"\n          name=\"value\"\n          onChange={ ({ target }) => this.handleInputs(target) }\n          value={ value }\n        />\n      </label>\n    );\n  }\n\n  descriptionInput() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          data-testid=\"description-input\"\n          type=\"text\"\n          id=\"description-input\"\n          name=\"description\"\n          onChange={ ({ target }) => this.handleInputs(target) }\n          value={ description }\n        />\n      </label>\n    );\n  }\n\n  currenciesInput() {\n    const { currencies } = this.props;\n    const { currency } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moedas:\n        <select\n          data-testid=\"currency-input\"\n          id=\"currency-input\"\n          name=\"currency\"\n          onChange={ ({ target }) => this.handleInputs(target) }\n          value={ currency }\n        >\n          {currencies.map((cu) => (\n            <option\n              data-testid={ cu }\n              key={ cu }\n              value={ cu }\n            >\n              { cu }\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  methodInput() {\n    const { method } = this.state;\n    return (\n      <label htmlFor=\"method-input\">\n        Método de pagamento:\n        <select\n          data-testid=\"method-input\"\n          id=\"method-input\"\n          name=\"method\"\n          onChange={ ({ target }) => this.handleInputs(target) }\n          value={ method }\n        >\n          <option>Dinheiro</option>\n          <option>Cartão de crédito</option>\n          <option>Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n\n  tagInput() {\n    const { tag } = this.state;\n    return (\n      <label htmlFor=\"tag-input\">\n        Categoria:\n        <select\n          data-testid=\"tag-input\"\n          id=\"tag-input\"\n          name=\"tag\"\n          onChange={ ({ target }) => this.handleInputs(target) }\n          value={ tag }\n        >\n          <option>Alimentação</option>\n          <option>Lazer</option>\n          <option>Trabalho</option>\n          <option>Transporte</option>\n          <option>Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  buttonInput() {\n    const { isEditingButton } = this.props;\n    return (\n      <button type=\"button\" onClick={ this.buttonClick }>\n        { isEditingButton ? 'Editar despesa' : 'Adicionar despesa' }\n      </button>\n    );\n  }\n\n  async fetchRates() {\n    const endpoint = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(endpoint);\n    const object = await response.json();\n    delete object.USDT;\n    return object;\n  }\n\n  async buttonClick() {\n    const { value, description, currency, method, tag, id } = this.state;\n    const { stateDispatch, expenses, valueDispatch, isEditingButton } = this.props;\n    const rates = await this.fetchRates();\n    const obj = {\n      id: expenses.length,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: rates,\n    };\n    if (isEditingButton) {\n      const updatedExpenses = expenses.map((expense) => expense.id === id )\n    }\n    stateDispatch(obj);\n    valueDispatch(parseFloat(value) * parseFloat(rates[currency].ask));\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <fieldset>\n          { this.valueInput() }\n          { this.descriptionInput() }\n          { this.currenciesInput() }\n          { this.methodInput() }\n          { this.tagInput() }\n          { this.buttonInput() }\n        </fieldset>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  editExpense: state.wallet.editExpense,\n  editing: state.wallet.editing,\n  isEditingButton: state.wallet.isEditingButton,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDispatch: () => dispatch(fetchCurrencies()),\n  stateDispatch: (obj) => dispatch(handleInputs(obj)),\n  valueDispatch: (value) => dispatch(handleTotal(value)),\n  stopDispatch: () => dispatch(stopEdit()),\n});\n\nForm.propTypes = {\n  fetchDispatch: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  stateDispatch: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  valueDispatch: PropTypes.func.isRequired,\n  editExpense: PropTypes.shape({}).isRequired,\n  editing: PropTypes.bool.isRequired,\n  stopDispatch: PropTypes.func.isRequired,\n  isEditingButton: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n"]},"metadata":{},"sourceType":"module"}